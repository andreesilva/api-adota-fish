"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
class EditClienteValidator {
    constructor(ctx) {
        this.ctx = ctx;
        this.refs = Validator_1.schema.refs({
            user_id: this.ctx.auth.user?.id
        });
        this.schema = Validator_1.schema.create({
            nome: Validator_1.schema.string({ trim: true }, [
                Validator_1.rules.minLength(3),
                Validator_1.rules.maxLength(255)
            ]),
            email: Validator_1.schema.string({ trim: true }, [
                Validator_1.rules.email(),
                Validator_1.rules.maxLength(255),
            ]),
            password: Validator_1.schema.string.nullableAndOptional({}, [Validator_1.rules.minLength(8), Validator_1.rules.maxLength(180)]),
            telefone: Validator_1.schema.string({ trim: true }, [
                Validator_1.rules.mobile({ locale: ["pt-BR"] }),
                Validator_1.rules.maxLength(15),
            ]),
        });
        this.messages = {
            required: "{{field}} é obrigatório para a edição",
            "email.email": "{{field}} deve ser um email válido",
            "email.unique": "{{field}} já está em uso por outro usuário",
            "password.minLenght": "{{field}} deve ter no mínimo 8 caracteres",
            "password.maxlenght": "{{field}} deve ter no máximo 180 caracteres",
            "telefone.mobile": "{{field}} deve ser um telefone válido",
        };
    }
}
exports.default = EditClienteValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWRpdENsaWVudGVWYWxpZGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJFZGl0Q2xpZW50ZVZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJFQUEwRTtBQUcxRSxNQUFxQixvQkFBb0I7SUFDdkMsWUFBc0IsR0FBd0I7UUFBeEIsUUFBRyxHQUFILEdBQUcsQ0FBcUI7UUFFdkMsU0FBSSxHQUFHLGtCQUFNLENBQUMsSUFBSSxDQUFDO1lBQ3hCLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRTtTQUNoQyxDQUFDLENBQUM7UUFHSSxXQUFNLEdBQUcsa0JBQU0sQ0FBQyxNQUFNLENBQUM7WUFDNUIsSUFBSSxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUNsQyxpQkFBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLGlCQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQzthQUNyQixDQUFDO1lBQ0YsS0FBSyxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUNuQyxpQkFBSyxDQUFDLEtBQUssRUFBRTtnQkFDYixpQkFBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7YUFRckIsQ0FBQztZQUNGLFFBQVEsRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxpQkFBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzNGLFFBQVEsRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDdEMsaUJBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO2dCQUNuQyxpQkFBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7YUFDcEIsQ0FBQztTQUNILENBQUMsQ0FBQztRQUVJLGFBQVEsR0FBbUI7WUFDaEMsUUFBUSxFQUFFLHVDQUF1QztZQUNqRCxhQUFhLEVBQUUsb0NBQW9DO1lBQ25ELGNBQWMsRUFBRSw0Q0FBNEM7WUFDNUQsb0JBQW9CLEVBQUUsMkNBQTJDO1lBQ2pFLG9CQUFvQixFQUFFLDZDQUE2QztZQUNuRSxpQkFBaUIsRUFBRSx1Q0FBdUM7U0FDM0QsQ0FBQztJQXJDZ0QsQ0FBQztDQXVDcEQ7QUF4Q0QsdUNBd0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NoZW1hLCBDdXN0b21NZXNzYWdlcywgcnVsZXMgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL1ZhbGlkYXRvcidcbmltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRDbGllbnRlVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGN0eDogSHR0cENvbnRleHRDb250cmFjdCkgeyB9XG5cbiAgcHVibGljIHJlZnMgPSBzY2hlbWEucmVmcyh7XG4gICAgdXNlcl9pZDogdGhpcy5jdHguYXV0aC51c2VyPy5pZFxuICB9KTtcblxuXG4gIHB1YmxpYyBzY2hlbWEgPSBzY2hlbWEuY3JlYXRlKHtcbiAgICBub21lOiBzY2hlbWEuc3RyaW5nKHsgdHJpbTogdHJ1ZSB9LCBbXG4gICAgICBydWxlcy5taW5MZW5ndGgoMyksXG4gICAgICBydWxlcy5tYXhMZW5ndGgoMjU1KVxuICAgIF0pLFxuICAgIGVtYWlsOiBzY2hlbWEuc3RyaW5nKHsgdHJpbTogdHJ1ZSB9LCBbXG4gICAgICBydWxlcy5lbWFpbCgpLFxuICAgICAgcnVsZXMubWF4TGVuZ3RoKDI1NSksXG4gICAgICAvKlxuICAgICAgcnVsZXMudW5pcXVlKHtcbiAgICAgICAgdGFibGU6IFwidXNlcnNcIixcbiAgICAgICAgY29sdW1uOiBcImVtYWlsXCIsXG4gICAgICAgIHdoZXJlTm90OiB7IGlkOiB0aGlzLnJlZnMudXNlcl9pZCB9XG4gICAgICB9KSxcbiAgICAgICovXG4gICAgXSksXG4gICAgcGFzc3dvcmQ6IHNjaGVtYS5zdHJpbmcubnVsbGFibGVBbmRPcHRpb25hbCh7fSwgW3J1bGVzLm1pbkxlbmd0aCg4KSwgcnVsZXMubWF4TGVuZ3RoKDE4MCldKSxcbiAgICB0ZWxlZm9uZTogc2NoZW1hLnN0cmluZyh7IHRyaW06IHRydWUgfSwgW1xuICAgICAgcnVsZXMubW9iaWxlKHsgbG9jYWxlOiBbXCJwdC1CUlwiXSB9KSxcbiAgICAgIHJ1bGVzLm1heExlbmd0aCgxNSksXG4gICAgXSksXG4gIH0pO1xuXG4gIHB1YmxpYyBtZXNzYWdlczogQ3VzdG9tTWVzc2FnZXMgPSB7XG4gICAgcmVxdWlyZWQ6IFwie3tmaWVsZH19IMOpIG9icmlnYXTDs3JpbyBwYXJhIGEgZWRpw6fDo29cIixcbiAgICBcImVtYWlsLmVtYWlsXCI6IFwie3tmaWVsZH19IGRldmUgc2VyIHVtIGVtYWlsIHbDoWxpZG9cIixcbiAgICBcImVtYWlsLnVuaXF1ZVwiOiBcInt7ZmllbGR9fSBqw6EgZXN0w6EgZW0gdXNvIHBvciBvdXRybyB1c3XDoXJpb1wiLFxuICAgIFwicGFzc3dvcmQubWluTGVuZ2h0XCI6IFwie3tmaWVsZH19IGRldmUgdGVyIG5vIG3DrW5pbW8gOCBjYXJhY3RlcmVzXCIsXG4gICAgXCJwYXNzd29yZC5tYXhsZW5naHRcIjogXCJ7e2ZpZWxkfX0gZGV2ZSB0ZXIgbm8gbcOheGltbyAxODAgY2FyYWN0ZXJlc1wiLFxuICAgIFwidGVsZWZvbmUubW9iaWxlXCI6IFwie3tmaWVsZH19IGRldmUgc2VyIHVtIHRlbGVmb25lIHbDoWxpZG9cIixcbiAgfTtcblxufVxuIl19